import unittest
import math
from math_interpreter.core.nodes import NumberNode, BinaryOpNode, VariableNode, FunctionCallNode, UnaryOpNode
from math_interpreter.core.evaluator import Evaluator

class TestEvaluator(unittest.TestCase):
    def setUp(self):
        """Set up the evaluator instance and shared variables."""
        self.evaluator = Evaluator()
        global variables
        variables = {'x': 10, 'y': 5}

    def test_evaluate_number_node(self):
        node = NumberNode(42)
        self.assertEqual(self.evaluator.evaluate(node), 42)

    def test_evaluate_binary_op_node(self):
        node = BinaryOpNode(
            left=NumberNode(3),
            operator='+',
            right=NumberNode(4)
        )
        self.assertEqual(self.evaluator.evaluate(node), 7)

    def test_evaluate_unary_op_node(self):
        node = UnaryOpNode(
            operator='-',
            operand=NumberNode(5)
        )
        self.assertEqual(self.evaluator.evaluate(node), -5)

    def test_evaluate_variable_node(self):
        evaluator = Evaluator(variables={'x': 10, 'y': 5})
        node = VariableNode('x')
        self.assertEqual(evaluator.evaluate(node), 10)


    def test_evaluate_function_call_node(self):
        node = FunctionCallNode(
            name='sqrt',
            arguments=[NumberNode(16)]
        )
        self.assertEqual(self.evaluator.evaluate(node), 4)

    def test_apply_operator(self):
        self.assertEqual(self.evaluator.apply_operator('+', 1, 2), 3)
        self.assertEqual(self.evaluator.apply_operator('-', 5, 3), 2)
        self.assertEqual(self.evaluator.apply_operator('*', 4, 3), 12)
        self.assertEqual(self.evaluator.apply_operator('/', 10, 2), 5)
        self.assertEqual(self.evaluator.apply_operator('^', 2, 3), 8)

    def test_apply_unary_operator(self):
        self.assertEqual(self.evaluator.apply_unary_operator('+', 10), 10)
        self.assertEqual(self.evaluator.apply_unary_operator('-', 10), -10)

    def test_apply_function(self):
        self.assertEqual(self.evaluator.apply_function('sin', [math.pi / 2]), 1)
        self.assertEqual(self.evaluator.apply_function('cos', [0]), 1)
        self.assertEqual(self.evaluator.apply_function('tan', [0]), 0)
        self.assertEqual(self.evaluator.apply_function('sqrt', [25]), 5)

    def test_invalid_binary_operator(self):
        with self.assertRaises(ValueError):
            self.evaluator.apply_operator('%', 2, 3)

    def test_invalid_unary_operator(self):
        with self.assertRaises(ValueError):
            self.evaluator.apply_unary_operator('~', 10)

    def test_invalid_function(self):
        with self.assertRaises(ValueError):
            self.evaluator.apply_function('unknown', [1])

if __name__ == '__main__':
    unittest.main()
